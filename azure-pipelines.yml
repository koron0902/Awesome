# Xamarin.Android
# Build a Xamarin.Android project.
# Add steps that test, sign, and distribute an app, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/xamarin

# specific branch build
pr:
  branches:
    include:
    - master
    - develop
    - issue/*
    - feature/*
    exclude:
    - archive/*

pool:
  vmImage: 'macos-latest'

variables:
  buildConfiguration: 'Release'
  outputDirectory: '$(build.binariesDirectory)/$(buildConfiguration)'

steps:
- task: NuGetToolInstaller@1

- task: NuGetCommand@2
  inputs:
    restoreSolution: '**/*.sln'

- task: XamarinAndroid@1
  inputs:
    projectFile: '**/*.csproj'
    outputDirectory: '$(outputDirectory)'
    configuration: '$(buildConfiguration)'

#- task: Bash@3
#  inputs:
#    targetType: 'inline'
#    script: |
#      # Write your commands here
#      /Library/Frameworks/Mono.framework/Versions/Current/bin/msbuild $(build.SourcesDirectory)/awesome/awesome.csproj \
#      -t:SignAndroidPackage \
#      -p:Configuration=$(buildConfiguration) \
#      -p:AndroidKeyStore=True \
#      -p:AndroidSigningKeyStore=$(build.SourcesDirectory)/awesome/milkcocoa.keystore \
#      -p:AndroidSigningStorePass=koronAs0102054 \
#      -p:AndroidSigningKeyAlias=milkcocoa \
#      -p:AndroidSigningKeyPass=koronAs0102054
#
#      echo '$(outputDirectory)'
#      ls $(outputDirectory)
- task: MSBuild@1
  inputs:
    solution: '**/*.sln'
    msbuildArchitecture: 'x64'
    platform: 'Any CPU'
    configuration: 'Release'
    msbuildArguments: '-t:SignAndroidPackage  -p:Configuration=$(buildConfiguration) -p:AndroidKeyStore=True -p:AndroidSigningKeyStore=$(build.SourcesDirectory)/awesome/milkcocoa.keystore -p:AndroidSigningStorePass=koronAs0102054 -p:AndroidSigningKeyAlias=milkcocoa -p:AndroidSigningKeyPass=koronAs0102054'

- task: Bash@3
  inputs:
    targetType: 'inline'
    script: |
      echo '$(outputDirectory)'
      ls $(outputDirectory)

# Starting Android Emulator
#- task: Bash@3
#  inputs:
#    targetType: 'inline'
#    script: |
#      #!/usr/bin/env bash
#      
#      # Install AVD files
#      echo "y" | $ANDROID_HOME/tools/bin/sdkmanager --install 'system-images;android-27;google_apis;x86'
#      
#      # Create emulator
#      echo "no" | $ANDROID_HOME/tools/bin/avdmanager create avd -n xamarin_android_emulator -k 'system-images;android-27;google_apis;x86' --force
#      
#      echo $ANDROID_HOME/emulator/emulator -list-avds
#      
#      echo "Starting emulator"
#      
#      # Start emulator in background
#      nohup $ANDROID_HOME/emulator/emulator -avd xamarin_android_emulator -no-snapshot > /dev/null 2>&1 &
#      $ANDROID_HOME/platform-tools/adb wait-for-device shell 'while [[ -z $(getprop sys.boot_completed | tr -d '\r') ]]; do sleep 1; done; input keyevent 82'
#      
#      $ANDROID_HOME/platform-tools/adb devices
#      
#      echo "Emulator started"